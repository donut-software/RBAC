// Code generated by sqlc. DO NOT EDIT.
// source: rbac.sql

package postgresql

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const changePassword = `-- name: ChangePassword :exec
UPDATE accounts SET
  hashedpassword = $1
WHERE username = $2
`

type ChangePasswordParams struct {
	Hashedpassword string
	Username       string
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) error {
	_, err := q.db.ExecContext(ctx, changePassword, arg.Hashedpassword, arg.Username)
	return err
}

const deleteAccount = `-- name: DeleteAccount :exec
UPDATE accounts SET
  is_blocked = true
WHERE username = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, username)
	return err
}

const deleteAccountRole = `-- name: DeleteAccountRole :exec
DELETE FROM account_roles
WHERE id = $1
`

func (q *Queries) DeleteAccountRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAccountRole, id)
	return err
}

const deleteHelpText = `-- name: DeleteHelpText :exec
DELETE FROM helptext
WHERE id = $1
`

func (q *Queries) DeleteHelpText(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteHelpText, id)
	return err
}

const deleteMenu = `-- name: DeleteMenu :exec
DELETE FROM menu
WHERE id = $1
`

func (q *Queries) DeleteMenu(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMenu, id)
	return err
}

const deleteNavigation = `-- name: DeleteNavigation :exec
DELETE FROM navigation
WHERE id = $1
`

func (q *Queries) DeleteNavigation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteNavigation, id)
	return err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM profiles
WHERE id = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProfile, id)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const deleteRoleTask = `-- name: DeleteRoleTask :exec
DELETE FROM role_tasks
WHERE id = $1
`

func (q *Queries) DeleteRoleTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRoleTask, id)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const insertAccountRole = `-- name: InsertAccountRole :one
INSERT INTO account_roles (
    account_id,
    role_id
)
VALUES (
  $1,
  $2
)
RETURNING id
`

type InsertAccountRoleParams struct {
	AccountID uuid.UUID
	RoleID    uuid.UUID
}

func (q *Queries) InsertAccountRole(ctx context.Context, arg InsertAccountRoleParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertAccountRole, arg.AccountID, arg.RoleID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertAccounts = `-- name: InsertAccounts :one
INSERT INTO accounts (
  username,
  hashedpassword,
  profile
)
VALUES (
  $1,
  $2,
  $3
)
RETURNING id
`

type InsertAccountsParams struct {
	Username       string
	Hashedpassword string
	Profile        uuid.UUID
}

func (q *Queries) InsertAccounts(ctx context.Context, arg InsertAccountsParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertAccounts, arg.Username, arg.Hashedpassword, arg.Profile)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertHelpText = `-- name: InsertHelpText :one
INSERT INTO helptext (
    task_id,
    helptext
)
VALUES (
  $1,
  $2
)
RETURNING id
`

type InsertHelpTextParams struct {
	TaskID   uuid.UUID
	Helptext string
}

func (q *Queries) InsertHelpText(ctx context.Context, arg InsertHelpTextParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertHelpText, arg.TaskID, arg.Helptext)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertMenu = `-- name: InsertMenu :one
INSERT INTO menu (
    task_id,
    name
)
VALUES (
  $1,
  $2
)
RETURNING id
`

type InsertMenuParams struct {
	TaskID uuid.UUID
	Name   string
}

func (q *Queries) InsertMenu(ctx context.Context, arg InsertMenuParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertMenu, arg.TaskID, arg.Name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertNavigation = `-- name: InsertNavigation :one
INSERT INTO navigation (
    task_id,
    name
)
VALUES (
  $1,
  $2
)
RETURNING id
`

type InsertNavigationParams struct {
	TaskID uuid.UUID
	Name   string
}

func (q *Queries) InsertNavigation(ctx context.Context, arg InsertNavigationParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertNavigation, arg.TaskID, arg.Name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertProfile = `-- name: InsertProfile :one
INSERT INTO profiles (
  profile_picture,
  profile_background,
  first_name,
  last_name,
  mobile,
  email
)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
)
RETURNING id
`

type InsertProfileParams struct {
	ProfilePicture    string
	ProfileBackground string
	FirstName         string
	LastName          string
	Mobile            string
	Email             string
}

func (q *Queries) InsertProfile(ctx context.Context, arg InsertProfileParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertProfile,
		arg.ProfilePicture,
		arg.ProfileBackground,
		arg.FirstName,
		arg.LastName,
		arg.Mobile,
		arg.Email,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertRole = `-- name: InsertRole :one
INSERT INTO roles (
    role
)
VALUES (
  $1
)
RETURNING id
`

func (q *Queries) InsertRole(ctx context.Context, role string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertRole, role)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertRoleTask = `-- name: InsertRoleTask :one
INSERT INTO role_tasks (
    task_id,
    role_id
)
VALUES (
  $1,
  $2
)
RETURNING id
`

type InsertRoleTaskParams struct {
	TaskID uuid.UUID
	RoleID uuid.UUID
}

func (q *Queries) InsertRoleTask(ctx context.Context, arg InsertRoleTaskParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertRoleTask, arg.TaskID, arg.RoleID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertTask = `-- name: InsertTask :one
INSERT INTO tasks (
    task
)
VALUES (
  $1
)
RETURNING id
`

func (q *Queries) InsertTask(ctx context.Context, task string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertTask, task)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const selectAccountRole = `-- name: SelectAccountRole :one
SELECT
  id,
  account_id,
  role_id,
  created_at
FROM
  account_roles
WHERE
  id = $1
LIMIT 1
`

func (q *Queries) SelectAccountRole(ctx context.Context, id uuid.UUID) (AccountRoles, error) {
	row := q.db.QueryRowContext(ctx, selectAccountRole, id)
	var i AccountRoles
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.RoleID,
		&i.CreatedAt,
	)
	return i, err
}

const selectAccounts = `-- name: SelectAccounts :one
SELECT
  id,
  username,
  hashedpassword,
  profile,
  is_blocked,
  created_at
FROM
  accounts
WHERE
  username = $1
LIMIT 1
`

func (q *Queries) SelectAccounts(ctx context.Context, username string) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, selectAccounts, username)
	var i Accounts
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Hashedpassword,
		&i.Profile,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}

const selectHelpText = `-- name: SelectHelpText :one
SELECT
  id,
  task_id,
  helptext,
  created_at
FROM
  helptext
WHERE
  id = $1
LIMIT 1
`

func (q *Queries) SelectHelpText(ctx context.Context, id uuid.UUID) (Helptext, error) {
	row := q.db.QueryRowContext(ctx, selectHelpText, id)
	var i Helptext
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.Helptext,
		&i.CreatedAt,
	)
	return i, err
}

const selectHelpTextByTasks = `-- name: SelectHelpTextByTasks :one
SELECT
  id,
  task_id,
  helptext,
  created_at
FROM
  helptext
WHERE
  task_id = $1
LIMIT 1
`

func (q *Queries) SelectHelpTextByTasks(ctx context.Context, taskID uuid.UUID) (Helptext, error) {
	row := q.db.QueryRowContext(ctx, selectHelpTextByTasks, taskID)
	var i Helptext
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.Helptext,
		&i.CreatedAt,
	)
	return i, err
}

const selectMenu = `-- name: SelectMenu :one
SELECT
  id,
  task_id,
  name,
  created_at
FROM
  menu
WHERE
  id = $1
LIMIT 1
`

type SelectMenuRow struct {
	ID        uuid.UUID
	TaskID    uuid.UUID
	Name      string
	CreatedAt time.Time
}

func (q *Queries) SelectMenu(ctx context.Context, id uuid.UUID) (SelectMenuRow, error) {
	row := q.db.QueryRowContext(ctx, selectMenu, id)
	var i SelectMenuRow
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const selectMenuByTask = `-- name: SelectMenuByTask :many
SELECT
  id,
  task_id,
  name,
  created_at
FROM
  menu
WHERE
  task_id = $1
`

type SelectMenuByTaskRow struct {
	ID        uuid.UUID
	TaskID    uuid.UUID
	Name      string
	CreatedAt time.Time
}

func (q *Queries) SelectMenuByTask(ctx context.Context, taskID uuid.UUID) ([]SelectMenuByTaskRow, error) {
	rows, err := q.db.QueryContext(ctx, selectMenuByTask, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectMenuByTaskRow{}
	for rows.Next() {
		var i SelectMenuByTaskRow
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectNavigation = `-- name: SelectNavigation :one
SELECT
  id,
  task_id,
  name,
  created_at
FROM
  navigation
WHERE
  id = $1
LIMIT 1
`

type SelectNavigationRow struct {
	ID        uuid.UUID
	TaskID    uuid.UUID
	Name      string
	CreatedAt time.Time
}

func (q *Queries) SelectNavigation(ctx context.Context, id uuid.UUID) (SelectNavigationRow, error) {
	row := q.db.QueryRowContext(ctx, selectNavigation, id)
	var i SelectNavigationRow
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const selectNavigationByTask = `-- name: SelectNavigationByTask :many
SELECT
  id,
  task_id,
  name,
  created_at
FROM
  navigation
WHERE
  task_id = $1
`

type SelectNavigationByTaskRow struct {
	ID        uuid.UUID
	TaskID    uuid.UUID
	Name      string
	CreatedAt time.Time
}

func (q *Queries) SelectNavigationByTask(ctx context.Context, taskID uuid.UUID) ([]SelectNavigationByTaskRow, error) {
	rows, err := q.db.QueryContext(ctx, selectNavigationByTask, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectNavigationByTaskRow{}
	for rows.Next() {
		var i SelectNavigationByTaskRow
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectProfile = `-- name: SelectProfile :one
SELECT
  id,
  profile_picture,
  profile_background,
  first_name,
  last_name,
  mobile,
  email,
  created_at
FROM
  profiles
WHERE
  id = $1
LIMIT 1
`

func (q *Queries) SelectProfile(ctx context.Context, id uuid.UUID) (Profiles, error) {
	row := q.db.QueryRowContext(ctx, selectProfile, id)
	var i Profiles
	err := row.Scan(
		&i.ID,
		&i.ProfilePicture,
		&i.ProfileBackground,
		&i.FirstName,
		&i.LastName,
		&i.Mobile,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const selectRole = `-- name: SelectRole :one
SELECT
  id,
  role,
  created_at
FROM
  roles
WHERE
  id = $1
LIMIT 1
`

func (q *Queries) SelectRole(ctx context.Context, id uuid.UUID) (Roles, error) {
	row := q.db.QueryRowContext(ctx, selectRole, id)
	var i Roles
	err := row.Scan(&i.ID, &i.Role, &i.CreatedAt)
	return i, err
}

const selectRoleTask = `-- name: SelectRoleTask :one
SELECT
  id,
  task_id,
  role_id,
  created_at
FROM
  role_tasks
WHERE
  id = $1
LIMIT 1
`

func (q *Queries) SelectRoleTask(ctx context.Context, id uuid.UUID) (RoleTasks, error) {
	row := q.db.QueryRowContext(ctx, selectRoleTask, id)
	var i RoleTasks
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.RoleID,
		&i.CreatedAt,
	)
	return i, err
}

const selectTask = `-- name: SelectTask :one
SELECT
  id,
  task,
  created_at
FROM
  tasks
WHERE
  id = $1
LIMIT 1
`

func (q *Queries) SelectTask(ctx context.Context, id uuid.UUID) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, selectTask, id)
	var i Tasks
	err := row.Scan(&i.ID, &i.Task, &i.CreatedAt)
	return i, err
}

const updateAccountRole = `-- name: UpdateAccountRole :exec
UPDATE account_roles SET
  account_id = $1,
  role_id    = $2
WHERE id = $3
`

type UpdateAccountRoleParams struct {
	AccountID uuid.UUID
	RoleID    uuid.UUID
	ID        uuid.UUID
}

func (q *Queries) UpdateAccountRole(ctx context.Context, arg UpdateAccountRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountRole, arg.AccountID, arg.RoleID, arg.ID)
	return err
}

const updateHelpText = `-- name: UpdateHelpText :exec
UPDATE helptext SET
  task_id   = $1,
  helptext  = $2
WHERE id = $3
`

type UpdateHelpTextParams struct {
	TaskID   uuid.UUID
	Helptext string
	ID       uuid.UUID
}

func (q *Queries) UpdateHelpText(ctx context.Context, arg UpdateHelpTextParams) error {
	_, err := q.db.ExecContext(ctx, updateHelpText, arg.TaskID, arg.Helptext, arg.ID)
	return err
}

const updateMenu = `-- name: UpdateMenu :exec
UPDATE menu SET
  task_id   = $1,
  name  = $2
WHERE id = $3
`

type UpdateMenuParams struct {
	TaskID uuid.UUID
	Name   string
	ID     uuid.UUID
}

func (q *Queries) UpdateMenu(ctx context.Context, arg UpdateMenuParams) error {
	_, err := q.db.ExecContext(ctx, updateMenu, arg.TaskID, arg.Name, arg.ID)
	return err
}

const updateNavigation = `-- name: UpdateNavigation :exec
UPDATE navigation SET
  task_id   = $1,
  name  = $2
WHERE id = $3
`

type UpdateNavigationParams struct {
	TaskID uuid.UUID
	Name   string
	ID     uuid.UUID
}

func (q *Queries) UpdateNavigation(ctx context.Context, arg UpdateNavigationParams) error {
	_, err := q.db.ExecContext(ctx, updateNavigation, arg.TaskID, arg.Name, arg.ID)
	return err
}

const updateProfile = `-- name: UpdateProfile :exec
UPDATE profiles SET
  profile_picture       = $1,
  profile_background    = $2,
  first_name            = $3,
  last_name             = $4,
  mobile                = $5,
  email                 = $6
WHERE id = $7
`

type UpdateProfileParams struct {
	ProfilePicture    string
	ProfileBackground string
	FirstName         string
	LastName          string
	Mobile            string
	Email             string
	ID                uuid.UUID
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateProfile,
		arg.ProfilePicture,
		arg.ProfileBackground,
		arg.FirstName,
		arg.LastName,
		arg.Mobile,
		arg.Email,
		arg.ID,
	)
	return err
}

const updateRole = `-- name: UpdateRole :exec
UPDATE roles SET
  role = $1
WHERE id = $2
`

type UpdateRoleParams struct {
	Role string
	ID   uuid.UUID
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateRole, arg.Role, arg.ID)
	return err
}

const updateRoleTask = `-- name: UpdateRoleTask :exec
UPDATE role_tasks SET
  task_id = $1,
  role_id    = $2
WHERE id = $3
`

type UpdateRoleTaskParams struct {
	TaskID uuid.UUID
	RoleID uuid.UUID
	ID     uuid.UUID
}

func (q *Queries) UpdateRoleTask(ctx context.Context, arg UpdateRoleTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateRoleTask, arg.TaskID, arg.RoleID, arg.ID)
	return err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks SET
  task = $1
WHERE id = $2
`

type UpdateTaskParams struct {
	Task string
	ID   uuid.UUID
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask, arg.Task, arg.ID)
	return err
}
